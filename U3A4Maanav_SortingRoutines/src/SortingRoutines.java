
import java.util.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 Maanav Dalal - July 20th 2017
 Demonstrating SelectionSort, BubbleSort, InsertionSort, as well as radiobuttons and timers to track how long the program / methods ran
 ICS4U Summer School
 */
public class SortingRoutines extends javax.swing.JFrame {

    ArrayList<Integer> nums = new ArrayList<Integer>(); //create array list for storing numbers
    Integer[] numsArray; //actual array that methods interact with

    int bubCount, selCount, insCount; //Amount of times the loop is run
    int bubComp, selComp, insComp; //Amount of times two variables were compared
    int bubShift, selShift, insShift; // Amount of times a swap occurred
    long bubSeconds, selSeconds, insSeconds; //Timer variables to check how long each method ran

    /**
     * Creates new form SortingRoutines
     */
    public SortingRoutines() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numberGroup = new javax.swing.ButtonGroup();
        ascDesc = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        numChoose = new javax.swing.JLabel();
        tenNums = new javax.swing.JRadioButton();
        hundredNums = new javax.swing.JRadioButton();
        thousandNums = new javax.swing.JRadioButton();
        fiveThousandNums = new javax.swing.JRadioButton();
        sortBtn = new javax.swing.JButton();
        order = new javax.swing.JLabel();
        sortAscending = new javax.swing.JRadioButton();
        sortDescending = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        originalNums = new javax.swing.JTextArea();
        origNums = new javax.swing.JLabel();
        sortNums = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sortedNums = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        sortResults = new javax.swing.JTextArea();
        results = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        title.setText("Sorting Routines");

        numChoose.setText("Enter the amount of Numbers in the List:");

        numberGroup.add(tenNums);
        tenNums.setSelected(true);
        tenNums.setText("10");

        numberGroup.add(hundredNums);
        hundredNums.setText("100");

        numberGroup.add(thousandNums);
        thousandNums.setText("1000");

        numberGroup.add(fiveThousandNums);
        fiveThousandNums.setText("5000");

        sortBtn.setText("Sort Numbers");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        order.setText("Sort Order");

        ascDesc.add(sortAscending);
        sortAscending.setSelected(true);
        sortAscending.setText("Ascending");

        ascDesc.add(sortDescending);
        sortDescending.setText("Descending");

        originalNums.setColumns(20);
        originalNums.setRows(5);
        jScrollPane1.setViewportView(originalNums);

        origNums.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        origNums.setText("Original Numbers");

        sortNums.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sortNums.setText("Sorted Numbers");

        sortedNums.setColumns(20);
        sortedNums.setRows(5);
        jScrollPane2.setViewportView(sortedNums);

        sortResults.setColumns(20);
        sortResults.setRows(5);
        jScrollPane3.setViewportView(sortResults);

        results.setText("Sort Results");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(numChoose)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tenNums)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hundredNums)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thousandNums))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(order)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sortDescending)
                                            .addComponent(sortAscending)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(origNums, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(sortNums, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(sortBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(results)
                                    .addComponent(fiveThousandNums))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numChoose)
                    .addComponent(hundredNums)
                    .addComponent(thousandNums)
                    .addComponent(fiveThousandNums)
                    .addComponent(tenNums))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(order)
                            .addComponent(sortAscending))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortDescending)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(origNums)
                            .addComponent(sortNums))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(results)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
        nums.clear(); //clears array for resuability
        numMaker(); //creates numbers based on user's choice of amount
        variableReset(); //resets all timing variables
        numsArray = new Integer[nums.size()];  //Convert arraylist to array
        nums.toArray(numsArray);
        boolean ascending = sortAscending.isSelected();
        //Runs all sorts, resetting array in between. Send them if the array is ascending or descending
        selectionSort(ascending);
        nums.toArray(numsArray);
        bubbleSort(ascending);
        nums.toArray(numsArray);
        insertionSort(ascending);
        outputResults(); //output the results
    }//GEN-LAST:event_sortBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingRoutines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingRoutines().setVisible(true);
            }
        });
    }

    public void selectionSort(boolean ascending) {//selection sort method 
        long start, finish; //timer start
        start = System.currentTimeMillis();
        int temp; //holding variable
        for (int i = 0; i < (numsArray.length - 1); i++) {
            for (int j = i + 1; j < numsArray.length; j++) {
                selComp++;
                if (numsArray[i] > numsArray[j] && ascending) {
                    temp = numsArray[i]; //swap the smallest element with position i
                    numsArray[i] = numsArray[j];
                    numsArray[j] = temp;
                    selShift++;
                } else if (numsArray[i] < numsArray[j] && !ascending) { //runs for descending
                    temp = numsArray[i];
                    numsArray[i] = numsArray[j];
                    numsArray[j] = temp;
                    selShift++;
                }
                selCount++;//count here
            }
        }
        finish = System.currentTimeMillis();
        selSeconds = finish - start; //timer end
    }

    public void bubbleSort(boolean ascending) { //bubble sort method
        long start, finish; //timer start
        start = System.currentTimeMillis();
        int j;
        boolean swap = true;
        int temp;   //holding variable
        while (swap) {
            swap = false;    //set swap to false awaiting a possible swap
            for (j = 0; j < numsArray.length - 1; j++) {
                bubCount++;
                bubComp++;
                if (numsArray[j] > numsArray[j + 1] && ascending) // change to > for ascending sort
                {
                    temp = numsArray[j];                //swap elements
                    numsArray[j] = numsArray[j + 1];
                    numsArray[j + 1] = temp;
                    bubShift++; //track swap
                    swap = true;
                } else if (numsArray[j] < numsArray[j + 1] && !ascending) { //runs for descending
                    temp = numsArray[j];
                    numsArray[j] = numsArray[j + 1];
                    numsArray[j + 1] = temp;
                    bubShift++;
                    swap = true;
                }
            }
        }
        finish = System.currentTimeMillis();
        bubSeconds = finish - start; //timer end
    }

    public void insertionSort(boolean ascending) { //insertion sort method
        long start, finish; //timer start
        start = System.currentTimeMillis();
        int i, j, temp;
        for (j = 1; j < numsArray.length; j++) // Start with 1 (not 0)
        {
            
            if (ascending) {
                insComp++;
                temp = numsArray[j];
                for (i = j - 1; (i >= 0) && (numsArray[i] > temp); i--) // Smaller values are moving up
                {

                    numsArray[i + 1] = numsArray[i];
                    insShift++;
                    insCount++;
                }
                numsArray[i + 1] = temp;

            } else { //runs for descending
                insComp++;
                temp = numsArray[j];
                for (i = j - 1; (i >= 0) && (numsArray[i] < temp); i--) // Smaller values are moving up
                {
                    numsArray[i + 1] = numsArray[i];
                    insShift++;
                    insCount++;
                }
                numsArray[i + 1] = temp;
            }
        }
        finish = System.currentTimeMillis();
        insSeconds = finish - start; //timer end
    }

    public void outputResults() { //outputs all results, including the sorted numbers column.
        sortResults.setText(null);
        sortedNums.setText(null);
        for (int i = 0; i < numsArray.length; i++) {
            sortedNums.append(Integer.toString(numsArray[i]) + "\n");
        } //all variables used here to show statistics of operation
        sortResults.append("Selection Sort\n\nNumber of times the loop was executed: " + selCount + "\nNumber of times a comparison was made: " + selComp);
        sortResults.append("\nNumber of times a value was shifted: " + selShift + "\nNumber of milleseconds to complete sort: " + selSeconds);
        sortResults.append("\n\nBubble Sort\n\nNumber of times the loop was executed: " + bubCount + "\nNumber of times a comparison was made: " + bubComp);
        sortResults.append("\nNumber of times a value was shifted: " + bubShift + "\nNumber of milleseconds to complete sort: " + bubSeconds);
        sortResults.append("\n\nInsertion Sort\n\nNumber of times the loop was executed: " + insCount + "\nNumber of times a comparison was made: " + insComp);
        sortResults.append("\nNumber of times a value was shifted: " + insShift + "\nNumber of milleseconds to complete sort: " + insSeconds);
    }

    public void numMaker() { //if tree for how many numbers should be generated
        if (tenNums.isSelected()) {
            randomGenerator(10);
        } else if (hundredNums.isSelected()) {
            randomGenerator(100);
        } else if (thousandNums.isSelected()) {
            randomGenerator(1000);
        } else {
            randomGenerator(5000);
        }
    }

    public void randomGenerator(int x) { //based on inputted ints, generate random numbers in range -10000 to +10000
        originalNums.setText(null);
        for (int i = 0; i < x; i++) {
            int r = (int) (Math.random() * (20000)) - 10000;
            nums.add(r);
            originalNums.append(Integer.toString(r) + "\n"); //add elements to array
        }

    }

    public void variableReset() { //reset all variables
        bubCount = 0;
        selCount = 0;
        insCount = 0;
        bubComp = 0;
        selComp = 0;
        insComp = 0;
        bubShift = 0;
        selShift = 0;
        insShift = 0;
        bubSeconds = 0;
        selSeconds = 0;
        insSeconds = 0;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ascDesc;
    private javax.swing.JRadioButton fiveThousandNums;
    private javax.swing.JRadioButton hundredNums;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel numChoose;
    private javax.swing.ButtonGroup numberGroup;
    private javax.swing.JLabel order;
    private javax.swing.JLabel origNums;
    private javax.swing.JTextArea originalNums;
    private javax.swing.JLabel results;
    private javax.swing.JRadioButton sortAscending;
    private javax.swing.JButton sortBtn;
    private javax.swing.JRadioButton sortDescending;
    private javax.swing.JLabel sortNums;
    private javax.swing.JTextArea sortResults;
    private javax.swing.JTextArea sortedNums;
    private javax.swing.JRadioButton tenNums;
    private javax.swing.JRadioButton thousandNums;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
